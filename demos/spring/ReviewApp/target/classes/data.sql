INSERT INTO QUESTIONS (QUESTION, CORRECT_ANSWER, INCORRECT_ANSWER1, INCORRECT_ANSWER2, TOPIC)  VALUES
('What is the purpose of the final keyword in Java?', 'To declare a variable that cannot be changed', 'To indicate the end of a method', 'To define a constant value', 'Java'),
('In Java, what is the difference between == and .equals() when comparing objects?', '== compares the references of objects, while .equals() compares their content', '== compares the content of objects, while .equals() compares their references', 'Both are used for reference comparison', 'Java'),
('What is the purpose of the "finally" block in Java exception handling?', 'To specify code that will be executed whether an exception is thrown or not', 'To catch and handle exceptions', 'To define the main logic of the program', 'Java'),
('How is method overloading different from method overriding in Java?', 'Method overloading occurs within the same class, while method overriding occurs in a subclass', 'Method overriding occurs within the same class, while method overloading occurs in a subclass', 'Method overloading and overriding are the same thing', 'Java'),
('What is the difference between an abstract class and an interface in Java?', 'An interface can only have abstract methods, while an abstract class can have both abstract and concrete methods', 'An abstract class can only have abstract methods, while an interface can have both abstract and concrete methods', 'There is no difference between an abstract class and an interface', 'Java'),
('How can you prevent a class from being subclassed in Java?', 'By declaring the class as final', 'By declaring the class as abstract', 'By using the private access modifier', 'Java'),
('What is the Java Virtual Machine (JVM)?', 'An abstract computing machine that enables a computer to run Java programs', 'A hardware component responsible for executing Java bytecode', 'A programming language used exclusively for web development', 'Java'),
('What is the role of the garbage collector in Java?', 'To automatically reclaim memory occupied by objects that are no longer in use', 'To manage the allocation of memory for new objects', 'To prevent memory leaks in Java programs', 'Java'),
('What is the difference between "ArrayList" and "LinkedList" in Java?', 'ArrayList is implemented as a resizable array, while LinkedList is implemented as a doubly-linked list', 'LinkedList is implemented as a resizable array, while ArrayList is implemented as a doubly-linked list', 'There is no difference between ArrayList and LinkedList', 'Java'),
('What is the purpose of the "static" keyword in Java?', 'To create a variable or method that belongs to the class, rather than an instance of the class', 'To make a variable or method non-modifiable', 'To declare a constant variable', 'Java'),
('How does Java handle multiple inheritance?', 'Java supports multiple inheritance through interfaces', 'Java does not support multiple inheritance', 'Java automatically resolves conflicts in multiple inheritance', 'Java'),
('What is the use of the "super" keyword in Java?', 'To refer to the immediate parent class object', 'To invoke a superclass method', 'To create an instance of the parent class', 'Java'),
('What is the purpose of the "this" keyword in Java?', 'To refer to the current instance of the class', 'To create a new instance of the class', 'To invoke a method of another class', 'Java'),
('What is a constructor in Java?', 'A special method used to initialize objects', 'A method used to destroy objects', 'A method used to compare objects', 'Java');


INSERT INTO QUESTIONS (QUESTION, CORRECT_ANSWER, INCORRECT_ANSWER1, INCORRECT_ANSWER2, TOPIC) VALUES
('What is the purpose of the SELECT statement in SQL?', 'To retrieve data from one or more tables', 'To update records in a table', 'To delete records from a table', 'SQL'),
('How can you retrieve all columns from a table named "employees" in SQL?', 'SELECT * FROM employees', 'SELECT ALL employees', 'RETRIEVE employees', 'SQL'),
('What is the purpose of the WHERE clause in an SQL query?', 'To filter records based on a specified condition', 'To order the result set', 'To group records based on a specified column', 'SQL'),
('How do you join two tables in SQL?', 'Using the JOIN keyword in the SELECT statement', 'Using the MERGE keyword', 'Using the LINK keyword', 'SQL'),
('What is the difference between INNER JOIN and LEFT JOIN in SQL?', 'INNER JOIN returns only the matching rows in both tables, while LEFT JOIN returns all rows from the left table and matching rows from the right table', 'LEFT JOIN returns only the matching rows in both tables, while INNER JOIN returns all rows from the left table and matching rows from the right table', 'There is no difference between INNER JOIN and LEFT JOIN', 'SQL'),
('What is a primary key in SQL?', 'A unique identifier for a record in a table', 'A key used to link two tables', 'A key that allows null values', 'SQL'),
('How can you sort the result set of an SQL query in descending order?', 'Using the ORDER BY clause with DESC keyword', 'Using the SORT DESC statement', 'Using the REVERSE ORDER statement', 'SQL'),
('What is the purpose of the GROUP BY clause in SQL?', 'To group rows that have the same values in specified columns', 'To order the result set in ascending order', 'To filter rows based on a condition', 'SQL'),
('How can you add a new record to a table in SQL?', 'Using the INSERT INTO statement', 'Using the ADD RECORD statement', 'Using the UPDATE statement', 'SQL'),
('What is the purpose of the HAVING clause in SQL?', 'To filter the result set based on a condition applied to aggregate functions', 'To order the result set', 'To group the result set based on a specified column', 'SQL'),
('What is the difference between CHAR and VARCHAR data types in SQL?', 'CHAR is a fixed-length string, while VARCHAR is a variable-length string', 'VARCHAR is a fixed-length string, while CHAR is a variable-length string', 'There is no difference between CHAR and VARCHAR', 'SQL'),
('How can you remove duplicate rows from a result set in SQL?', 'Using the DISTINCT keyword', 'Using the REMOVE DUPLICATES statement', 'Using the UNIQUE keyword', 'SQL'),
('How do you update data in a table in SQL?', 'Using the UPDATE statement', 'Using the MODIFY statement', 'Using the CHANGE statement', 'SQL'),
('How can you retrieve the number of rows in a table in SQL?', 'Using the COUNT() function', 'Using the NUM_ROWS() function', 'Using the TOTAL_ROWS() function', 'SQL'),
('What is a foreign key in SQL?', 'A column or a set of columns in a table that refers to the primary key of another table', 'A key used to sort rows in a table', 'A key that allows null values', 'SQL'),
('How do you delete all records from a table in SQL?', 'Using the DELETE FROM statement without a WHERE clause', 'Using the REMOVE ALL statement', 'Using the DROP statement', 'SQL'),
('What is the purpose of the SQL DISTINCT keyword?', 'To retrieve unique values from a specified column in a result set', 'To order the result set', 'To filter rows based on a condition', 'SQL'),
('How can you rename a column in an existing table in SQL?', 'Using the ALTER TABLE statement with the RENAME COLUMN clause', 'Using the CHANGE COLUMN statement', 'Using the MODIFY COLUMN statement', 'SQL');


INSERT INTO QUESTIONS (QUESTION, CORRECT_ANSWER, INCORRECT_ANSWER1, INCORRECT_ANSWER2, TOPIC) VALUES
('What is Spring Boot?', 'A framework that simplifies the development of Java applications by providing production-ready defaults for application setup', 'A tool for bootstrapping Spring applications', 'An extension of the Spring framework for web development', 'Spring'),
('How does Spring Boot simplify the configuration of a Spring application?', 'By providing sensible defaults and reducing the need for manual configuration', 'By introducing a new configuration language', 'By eliminating the need for configuration in Spring applications', 'Spring'),
('What is the purpose of the @SpringBootApplication annotation in a Spring Boot application?', 'To indicate the main class of the application and enable various configurations', 'To declare a Spring bean', 'To define the application version', 'Spring'),
('How does Spring Boot handle external configuration?', 'By using property files, YAML files, environment variables, and command-line arguments', 'By embedding configuration directly into the application code', 'By relying solely on XML configuration files', 'Spring'),
('What is the Spring IoC (Inversion of Control) container?', 'A container responsible for managing the lifecycle of Java objects and their dependencies', 'A container for storing configuration properties', 'A container for managing database connections', 'Spring'),
('How does Spring Boot support the development of RESTful APIs?', 'By providing annotations such as @RestController and simplifying the creation of RESTful endpoints', 'By integrating with SOAP-based web services', 'By relying on external libraries for RESTful API development', 'Spring'),
('What is the purpose of the Spring Boot Starter concept?', 'To simplify the dependency management and configuration of Spring Boot applications', 'To start the Spring Boot application', 'To define the entry point of the application', 'Spring'),
('How does Spring Boot simplify database access with Spring Data JPA?', 'By providing a high-level abstraction over data access and eliminating boilerplate code', 'By removing the need for databases in Spring applications', 'By relying on JDBC templates for data access', 'Spring'),
('What is the purpose of the @Entity annotation in Spring Data JPA?', 'To indicate that a class is a JPA entity and should be mapped to a database table', 'To define a Spring bean', 'To specify the primary key of an entity', 'Spring'),
('How does Spring Boot support the creation of database queries in Spring Data JPA?', 'By using method names in repository interfaces or by writing custom JPQL queries', 'By relying solely on stored procedures for database queries', 'By using plain SQL queries in the application code', 'Spring'),
('What is the role of the Spring Boot @RequestMapping annotation in Spring Web?', 'To map web requests to specific controller methods', 'To define the primary key of a JPA entity', 'To specify the version of the Spring Boot application', 'Spring'),
('What is the purpose of the @RestController annotation in Spring Web?', 'To indicate that a class is a controller and that its methods directly return data rather than a view', 'To define a Spring bean', 'To specify the primary key of a JPA entity', 'Spring'),
('What is the purpose of the Spring Boot @PathVariable annotation?', 'To extract values from the URI path and use them as method parameters in a controller', 'To define a Spring bean', 'To specify the primary key of a JPA entity', 'Spring'),
('How can you enable cross-origin resource sharing (CORS) in a Spring Boot application?', 'By using the @CrossOrigin annotation or configuring CORS in application properties', 'By disabling all security features', 'By relying on the browser to handle CORS', 'Spring'),
('What is the purpose of the Spring Boot @Autowired annotation?', 'To inject dependencies automatically, eliminating the need for manual wiring', 'To define a Spring bean', 'To specify the primary key of a JPA entity', 'Spring');


INSERT INTO QUESTIONS (QUESTION, CORRECT_ANSWER, INCORRECT_ANSWER1, INCORRECT_ANSWER2, TOPIC) VALUES
('What is Angular?', 'A TypeScript-based open-source web application framework', 'A server-side scripting language', 'An object-oriented programming language', 'Angular'),
('How does Angular differ from AngularJS?', 'Angular is a complete rewrite in TypeScript with improved performance and features, while AngularJS is the original version written in JavaScript', 'AngularJS is the latest version of Angular with enhanced features', 'Angular is only a subset of the features in AngularJS', 'Angular'),
('What is the purpose of the Angular CLI?', 'To automate common development tasks and provide a command-line interface for Angular projects', 'To create graphical user interfaces for Angular applications', 'To serve as a version control system for Angular projects', 'Angular'),
('What is an Angular component?', 'A building block of an Angular application that encapsulates the logic, structure, and presentation of a part of the user interface', 'A server-side script in Angular', 'A CSS style definition in Angular', 'Angular'),
('How does data binding work in Angular?', 'Data binding connects the view (HTML) with the model (component) in both directions, keeping them synchronized', 'Data binding is not supported in Angular', 'Data binding only works from the view to the model', 'Angular'),
('What is an Angular directive?', 'A custom HTML element or attribute that extends the behavior of the DOM', 'A built-in Angular component', 'A placeholder for dynamic content in Angular', 'Angular'),
('What is the purpose of Angular modules?', 'To organize and encapsulate code into cohesive units, making the application more maintainable and scalable', 'To define the visual layout of an Angular application', 'To manage server-side logic in Angular', 'Angular'),
('What is Angular Routing?', 'A mechanism for navigating between views or pages in a single-page application', 'A way to define the layout structure of an Angular component', 'A feature for handling server-side requests in Angular', 'Angular'),
('What is dependency injection in Angular?', 'A design pattern where a class receives its dependencies from an external source rather than creating them itself', 'A way to include external JavaScript libraries in Angular applications', 'A mechanism for handling HTTP requests in Angular', 'Angular'),
('What is Angular ngFor directive used for?', 'To iterate over a list of items and create multiple copies of a template', 'To define a CSS style for Angular components', 'To declare a new variable in Angular', 'Angular'),
('What is Angular ngIf directive used for?', 'To conditionally render or remove elements from the DOM based on a condition', 'To create a new instance of an Angular component', 'To define a loop in Angular', 'Angular'),
('What is Angular two-way data binding?', 'A mechanism that allows automatic synchronization between the model and the view in both directions', 'A one-time binding from the model to the view', 'A unidirectional data flow from the view to the model', 'Angular'),
('What is Angular Interpolation?', 'A way to embed expressions into marked-up text using double curly braces {{}}', 'A method for compressing Angular code', 'A directive for creating custom HTML elements in Angular', 'Angular'),
('What is Angular ngClass directive used for?', 'To conditionally apply CSS classes to elements based on expression evaluation', 'To define a new Angular component', 'To create a loop in Angular', 'Angular'),
('What is Angular HttpClient used for?', 'A module for making HTTP requests and handling responses in Angular applications', 'A tool for testing Angular components', 'A utility for managing Angular services', 'Angular'),
('What is Angular EventEmitter?', 'A class that enables communication between components in Angular through custom events', 'A built-in Angular service for handling HTTP requests', 'An Angular directive for handling keyboard events', 'Angular'),
('What is Angular ngModel directive used for?', 'To bind the value of an input field to a property in the component', 'To define a CSS style for Angular components', 'To declare a new variable in Angular', 'Angular'),
('What is Angular Change Detection?', 'A mechanism that automatically updates the view when the model changes', 'A tool for debugging Angular applications', 'A feature for handling server-side requests in Angular', 'Angular');
